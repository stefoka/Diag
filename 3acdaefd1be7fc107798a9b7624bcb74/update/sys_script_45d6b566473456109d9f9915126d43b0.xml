<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_nuvo_diag_healthcheck_logs</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Send Logs to Nuvolo Instance</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    try {
        if (!gs.getProperty('x_nuvo_health_scan.parent_instance')) {
            var instance = gs.getProperty('x_nuvo_diag.nuvolo_healthcheck_instance_name');
            var probe_category = current.getValue('probe_category');
            var healthcheck_instance = current.healthcheck_instance.source.toString();
            var healthcheck_type = current.getValue('healthcheck_type');
            var result = current.getValue('result');
            var error_message = current.getValue('error_message');
            var feature_usage = current.getValue('feature_usage');
            var helper = new x_nuvo_diag.HealthCheckHelper();
            var credentials = JSON.parse(helper.getIntegrationUserCredentials());
            var user = credentials.username;
            var password = credentials.password;

            /////////CREATE HEALTHCHECK LOG
            var request = new sn_ws.RESTMessageV2();
            request.setEndpoint('https://' + instance + '.service-now.com/api/now/table/x_nuvo_diag_healthcheck_logs');
            request.setHttpMethod('POST');
            request.setBasicAuth(user, password);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader('Content-Type', 'application/json');

            var requestBody = {
                "probe_category": probe_category,
                "healthcheck_type": healthcheck_type,
                "result": result,
                "error_message": error_message,
                "feature_usage": feature_usage
            };

            var requestBodyStr = JSON.stringify(requestBody);

            request.setRequestBody(requestBodyStr);

            var response = request.execute();
            var statusCode = response.getStatusCode();
            if (statusCode >= 200 && statusCode < 300) {
                var sysId = JSON.parse(response.getBody()).result.sys_id.toString();
            } else {
                return;
            }

            //CREATE Instanece->Log relationship

            var m2mRequest = new sn_ws.RESTMessageV2();
            m2mRequest.setEndpoint('https://' + instance + '.service-now.com/api/now/table/x_nuvo_health_scan_m2m_x_nuvo_diag_x_nuvo_healt');
            m2mRequest.setHttpMethod('POST');
            m2mRequest.setBasicAuth(user, password);
            m2mRequest.setRequestHeader("Accept", "application/json");
            m2mRequest.setRequestHeader('Content-Type', 'application/json');

            var requestBodyM2M = {
                "x_nuvo_health_scan_healthcheck_instance": healthcheck_instance,
                "x_nuvo_diag_healthcheck_logs": sysId,
            };

            var requestBodyStrM2m = JSON.stringify(requestBodyM2M);

            m2mRequest.setRequestBody(requestBodyStrM2m);
            response = m2mRequest.execute();
            statusCode = response.getStatusCode();

        }
    } catch (err) {
        gs.info("SPOPOV ERROR : " + err)
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>abraham.kannampuzha@nuvolo.com</sys_created_by>
        <sys_created_on>2024-09-25 10:32:24</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>45d6b566473456109d9f9915126d43b0</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Send Logs to Nuvolo Instance</sys_name>
        <sys_overrides/>
        <sys_package display_value="Diagnostic Tool" source="x_nuvo_diag">3acdaefd1be7fc107798a9b7624bcb74</sys_package>
        <sys_policy/>
        <sys_scope display_value="Diagnostic Tool">3acdaefd1be7fc107798a9b7624bcb74</sys_scope>
        <sys_update_name>sys_script_45d6b566473456109d9f9915126d43b0</sys_update_name>
        <sys_updated_by>Stefan.Popov@nuvolo.com</sys_updated_by>
        <sys_updated_on>2024-11-28 10:36:47</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=45d6b566473456109d9f9915126d43b0"/>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>45d6b566473456109d9f9915126d43b0</id>
        <sys_created_by>Stefan.Popov@nuvolo.com</sys_created_by>
        <sys_created_on>2024-10-09 10:51:47</sys_created_on>
        <sys_id>3d12828393059210052ef5cd0bba1056</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>Stefan.Popov@nuvolo.com</sys_updated_by>
        <sys_updated_on>2024-10-09 10:51:47</sys_updated_on>
        <table>sys_script</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
