<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_nuvo_diag.NuvoloTempAccessAjax</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>NuvoloTempAccessAjax</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[var NuvoloTempAccessAjax = Class.create();
NuvoloTempAccessAjax.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    createTempAccessRecord: function(caseNumber, endOfAccessString, accessType, accessTypeText, domain) {

        caseNumber = caseNumber || this.getParameter('case_number');
        endOfAccessString = endOfAccessString || this.getParameter('end_of_access');
        accessType = accessType || this.getParameter('access_type');
        accessTypeText = accessTypeText || this.getParameter('access_type_text');
        var tempAccessObj = {
            agents: [],
            link: '',
            message: ''
        };

        var endOfAccessDays = parseInt(endOfAccessString, 10);
        var endOfAccessDate = new GlideDate();
        endOfAccessDate.addDaysUTC(endOfAccessDays);

        var requestorDomain = '';

		if(domain) {
			requestorDomain = domain;
		}else {
			var requestorID = gs.getUserID();
			
			var requestorGR = new GlideRecord('sys_user');
			if (requestorGR.get(requestorID)) {
				requestorDomain = requestorGR.email.split('@')[1];
			}
		}

        var localInst = gs.getProperty('instance_name');
        var inst = gs.getProperty('x_nuvo_diag.nuvolo_healthcheck_instance_name');

        username = gs.getProperty('x_nuvo_diag.integration_user_name'),
        password = gs.getProperty('x_nuvo_diag.integration_user_password');

        var casesAPIEndpoint = 'https://' + inst + '.service-now.com/api/now/table/x_nuvo_health_scan_client_environment_access?sysparm_query=case_numberLIKE' + caseNumber;

        var casesR = new sn_ws.RESTMessageV2();
        casesR.setEndpoint(casesAPIEndpoint);
        casesR.setHttpMethod('GET');
        casesR.setRequestHeader('Content-Type', 'application/json');
        casesR.setBasicAuth(username, password);

        var casesResponse = casesR.execute();
        var casesResponseBody = casesResponse.getBody();
        var casesHttpStatus = casesResponse.getStatusCode();

        if (casesHttpStatus == 200) {
            var casesResult = JSON.parse(casesResponseBody).result;
            if (casesResult.length === 0) {
                // ERROR - Case not found
                tempAccessObj.message = "Case " + caseNumber + " doesn't exist in the system!";
                return JSON.stringify(tempAccessObj);
            } else {
                // var apiEndpoint = 'https://' + inst + '.service-now.com/api/now/table/x_nuvo_health_scan_client_environment_access?sysparm_query=case_numberLIKE' + caseNumber;

                // var r = new sn_ws.RESTMessageV2();
                // r.setEndpoint(apiEndpoint);
                // r.setHttpMethod('GET');
                // r.setRequestHeader('Content-Type', 'application/json');
                // r.setBasicAuth(username, password);

                // var response = r.execute();
                // var responseBody = response.getBody();
                // var httpStatus = response.getStatusCode();

                var agentsAssigned = false;

                var agentEmails = [];
                var result = JSON.parse(casesResponseBody).result;

                if (result.length !== 0) {

                    for (var j = 0; j < result.length; j++) {
                        var record = result[j];
                        if (agentEmails.indexOf(record.email) != -1) {
                            continue;
                        }
                        agentEmails.push(record.email);

                        var contactDomain = record.contact_domain;

                        if (contactDomain !== requestorDomain) {
                            //ERROR - Case not owned by the same Client
                            tempAccessObj.message = "Case " + caseNumber + " cannot be accessed because it was not raised by your company, or the contact's email domain does not match your company's domain";

                            return JSON.stringify(tempAccessObj);
                        }

                        var newRecord = new GlideRecord('x_nuvo_diag_nuvolo_temporary_access');
                        newRecord.addEncodedQuery('assigned_to_email=' + record.email + '^status=granted');
                        newRecord.query();

                        if (!newRecord.hasNext()) {
                            var updateData = {
                                status: 'granted',
                                expiration_date: endOfAccessDate.getDisplayValue(),
                                access_type: accessType + '',
                                instance_url: 'https://' + localInst + '.service-now.com'
                            };
                            var sysId = record.sys_id;
                            var agentSysID = record.agent.value;

                            // var link = "https://" + localInst + ".service-now.com/sys_user.do?sys_id=" + agentSysID;

                            var link = "https://" + localInst + ".service-now.com/sys_user_list.do?sysparm_query=email=" + record.email;

                            var tempObj = {
                                agent: {
                                    name: record.agent_name,
                                    link: link
                                },
                                email: record.email,
                                accessType: accessTypeText,
                                endOfAccessDate: endOfAccessDate.getDisplayValue()
                            };

                            tempAccessObj.agents.push(tempObj);

                            newRecord.initialize();
                            newRecord.case_number = caseNumber;
                            newRecord.end_of_access = endOfAccessDate.getDisplayValue();
                            newRecord.assigned_to_email = record.email + '';
                            newRecord.assigned_to_password = record.temp_password + '';
                            newRecord.external_key = record.sys_id + '';
                            newRecord.setValue('access_type', accessType);
                            newRecord.status = 'in_progress';

                            var insertResult = newRecord.insert();
                            var api = new x_nuvo_diag.HealthCheckHelper();
                            agentsAssigned = true;

                            if (record.instance_url == "" || record.instance_url == 'https://' + localInst + '.service-now.com') {

                                api.updateClientEnvironmentAccessRecord(sysId, updateData);
                            } else {
                                var query = encodeURIComponent('case_numberLIKE' + caseNumber + '^instance_url=https://' + localInst + '.service-now.com^email=' + record.email)
                                var newCaseAPIEndpoint = 'https://' + inst + '.service-now.com/api/now/table/x_nuvo_health_scan_client_environment_access?sysparm_query=' + query;
                                var case1 = new sn_ws.RESTMessageV2();
                                case1.setEndpoint(newCaseAPIEndpoint);
                                case1.setHttpMethod('GET');
                                case1.setRequestHeader('Content-Type', 'application/json');
                                case1.setBasicAuth(username, password);

                                var caseResponse = case1.execute();
                                var caseResponseBody = caseResponse.getBody();
                                var caseHttpStatus = caseResponse.getStatusCode();

                                if (caseHttpStatus == 200) {
                                    var caseResult = JSON.parse(caseResponseBody).result;
                                    if (caseResult.length === 0) {
                                        record.status = 'granted';
                                        record.expiration_date = endOfAccessDate.getDisplayValue();
                                        record.access_type = accessType + '';
                                        record.instance_url = 'https://' + localInst + '.service-now.com';
                                        record.agent = record.agent.value;
                                        record.account = record.account_text;
                                        if (record.hasOwnProperty('sys_id')) {
                                            delete record.sys_id;
                                        }
                                        api.createTempAccessInNUSD(record);
                                    } else {
										var foundSysId = JSON.parse(caseResponseBody).result;
                                        api.updateClientEnvironmentAccessRecord(foundSysId[0].sys_id, updateData);
                                    }
                                }
                            }
                        } else if (newRecord.next() && newRecord.case_number.indexOf(caseNumber) < 0) {
                            newRecord.case_number = newRecord.case_number + ',' + caseNumber;
                            var currentEndOfAccess = new GlideDateTime();
                            currentEndOfAccess.setValue(newRecord.end_of_access);
                            if (endOfAccessDate.getNumericValue() > currentEndOfAccess.getNumericValue()) {
                                newRecord.end_of_access = endOfAccessDate.getDisplayValue();
                            }
                            newRecord.update();
                        }
                    }

                    if (agentsAssigned) {
                        tempAccessObj.message = 'Temporary access record created successfully!';
                    } else {
                        //ERROR - All Agents assigned to the Case already have access granted to them

                        tempAccessObj.message = 'All assigned agents have already been granted access for case ' + caseNumber;
                    }
                } else {
                    //ERROR - No Agents assigned to the Case
                    tempAccessObj.message = 'No agents are currently assigned to this case.';
                }
            }

        } else {
            //ERROR - Case Table API Fail
            tempAccessObj.message = 'Failed while trying to find the Case in the system!';
        }

        return JSON.stringify(tempAccessObj);

    },
    getInstanceType: function() {
        var instanceType = gs.getProperty('sn_appclient.instance_type');
        return instanceType;
    },

	getCases: function() {
		var casesObj = {
            cases: [],
            message: ''
        };

		var casesGr = new GlideRecord('x_nuvo_diag_nuvolo_temporary_access');
		casesGr.addEncodedQuery('status=granted');
		casesGr.query();

		while(casesGr.next()) {
			var cases = casesGr.case_number.split(',');

			for (var i = 0; i < cases.length; i ++){
				if(casesObj.cases.indexOf(cases[i]) === -1) {
					casesObj.cases.push(cases[i]);
				}
			}
		}

		return JSON.stringify(casesObj);
	},

    getEmailsFromSysIds: function() {
        var sysIds = this.getParameter('sysparm_sysIds').split(',');
        var emailArr = [];

        for (var i = 0; i < sysIds.length; i++) {
            var tempAccessGR = new GlideRecord('x_nuvo_diag_nuvolo_temporary_access');
            tempAccessGR.addQuery('sys_id', sysIds[i]);
            tempAccessGR.query();

            while (tempAccessGR.next()) {
                if (tempAccessGR.status != 'granted') {
                    gs.addErrorMessage("All selected records must have a status of 'Granted'");
                    return false;
                }

                if (tempAccessGR.assigned_to_email) {
                    emailArr.push(tempAccessGR.assigned_to_email.toString());
                }


            }
        }

        var result = {
            emails: emailArr.join(','),
        };

        return JSON.stringify(result);
    },

    revokeNuvoloAccessAjax: function() {
        var emails = this.getParameter('sysparm_emails');
        var msg = this.getParameter('sysparm_msg');

        var emailsArr = emails.split(',');
        var api = new x_nuvo_diag.HealthCheckHelper();
        api.revokeNuvoloAccess(emailsArr);

    },

    getEmailBySysId: function() {
        var sysId = this.getParameter('sysparm_sys_id');
        var tempAccessRec = new GlideRecord('x_nuvo_diag_nuvolo_temporary_access');

        if (tempAccessRec.get(sysId)) {
            return tempAccessRec.assigned_to_email.toString();
        }

    },

	showInfoMessage: function() {
		var message = this.getParameter('sysparm_message');
		gs.addInfoMessage(message);	
	},

	showErrorMessage: function() {
		var message = this.getParameter('sysparm_message');
		gs.addErrorMessage(message);
	},

    extendAccess: function() {
		var days = parseInt(this.getParameter('sysparm_days'), 10);
		var caseNumber = this.getParameter('sysparm_case');

        var tempAccessRecords = new GlideRecord('x_nuvo_diag_nuvolo_temporary_access');
		tempAccessRecords.addEncodedQuery('case_numberLIKE' + caseNumber);
		tempAccessRecords.query();

		if(tempAccessRecords.hasNext()){
			while (tempAccessRecords.next()) {

				var newEndDate = new GlideDateTime(tempAccessRecords.end_of_access);
				newEndDate.addDaysUTC(days);

				tempAccessRecords.end_of_access = newEndDate;
				tempAccessRecords.update();
			}

			return "success";
		}
		else {
			return "failed";
		}
    },

	syncTempAccess: function() {

		//Call events that will trigger Script Actions
		gs.eventQueue('x_nuvo_diag.revoke_access_no_active_case');
		gs.eventQueue('x_nuvo_diag.grant_temp_access');
		
	},


});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>Kaloyan.Yanakov@nuvolo.com</sys_created_by>
        <sys_created_on>2024-09-27 11:04:24</sys_created_on>
        <sys_id>c5b1185393781a10052ef5cd0bba1093</sys_id>
        <sys_mod_count>163</sys_mod_count>
        <sys_name>NuvoloTempAccessAjax</sys_name>
        <sys_package display_value="Diagnostic Tool" source="x_nuvo_diag">3acdaefd1be7fc107798a9b7624bcb74</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Diagnostic Tool">3acdaefd1be7fc107798a9b7624bcb74</sys_scope>
        <sys_update_name>sys_script_include_c5b1185393781a10052ef5cd0bba1093</sys_update_name>
        <sys_updated_by>iliyan.nedelchev@nuvolo.com</sys_updated_by>
        <sys_updated_on>2025-02-26 13:23:04</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>c5b1185393781a10052ef5cd0bba1093</id>
        <sys_created_by>iliyan.nedelchev@nuvolo.com</sys_created_by>
        <sys_created_on>2024-10-16 14:44:00</sys_created_on>
        <sys_id>7f5ab2d9479d5a106d8ba835126d4318</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>iliyan.nedelchev@nuvolo.com</sys_updated_by>
        <sys_updated_on>2024-10-16 14:44:00</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
