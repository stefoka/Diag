<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>Revoke Agent Access</action_name>
        <active>true</active>
        <client>true</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments/>
        <condition/>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style>destructive</form_style>
        <format_for_configurable_workspace>false</format_for_configurable_workspace>
        <hint/>
        <isolate_script>true</isolate_script>
        <list_action>true</list_action>
        <list_banner_button>true</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style>destructive</list_style>
        <messages/>
        <name>Revoke Agent Access</name>
        <onclick>revokeNuvoloAccess()</onclick>
        <order>100</order>
        <script><![CDATA[function revokeNuvoloAccess() {
    try {
        // Attempt to use g_form
        if (typeof g_form !== 'undefined') {
            var email = g_form.getValue('assigned_to_email');

            if (!email) {
                // displayErrorMessage("No email found to revoke access.");
                return;
            }

            var ga = new GlideAjax('HealthCheckHelper');
            ga.addParam('sysparm_name', 'revokeNuvoloAccess');
            ga.addParam('emails', email);

            ga.getXMLAnswer(function(response) {
                if (response === 'success') {
                    // displayInfoMessage('Access revoked successfully.');
                } else {
                    // displayErrorMessage('Failed to revoke access.');
                }
            });
        } else {
            throw new Error("g_form is not available"); // Trigger catch block if g_form is undefined
        }
    } catch (e) {
        // Fallback to g_list if g_form is not available
        if (typeof g_list !== 'undefined') {
            var selectedRecords = g_list.getChecked(); // Get selected records from list

            if (!selectedRecords || selectedRecords.length === 0) {
                // displayErrorMessage("Please select at least one record to revoke access.");
                return;
            }

            var ga = new GlideAjax('HealthCheckHelper');
            ga.addParam('sysparm_name', 'getEmailsFromRecords');
            ga.addParam('sys_ids', selectedRecords.join(',')); // Send selected record sys_ids

            // Get the emails of the selected records
            ga.getXMLAnswer(function(response) {
                if (response) {
                    // Use the response (comma-separated emails) to revoke access
                    revokeAccess(response);
                } else {
                    // displayErrorMessage('Failed to retrieve email addresses.');
                }
            });
        } else {
            // displayErrorMessage("This action can only be executed from a form or list view.");
        }
    }
}




function revokeAccess(emailString) {
    var ga = new GlideAjax('HealthCheckHelper');
    ga.addParam('sysparm_name', 'revokeNuvoloAccess');
    ga.addParam('emails', emailString);

    ga.getXMLAnswer(function(response) {
        if (response === 'success') {
            displayInfoMessage('Access revoked successfully for the selected records.');
        } else {
            displayErrorMessage('Failed to revoke access for the selected records.');
        }
    });
}
]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>Kaloyan.Yanakov@nuvolo.com</sys_created_by>
        <sys_created_on>2024-10-30 08:32:09</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e91b653d4725de506d8ba835126d43b5</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>Revoke Agent Access</sys_name>
        <sys_overrides/>
        <sys_package display_value="Diagnostic Tool" source="x_nuvo_diag">3acdaefd1be7fc107798a9b7624bcb74</sys_package>
        <sys_policy/>
        <sys_scope display_value="Diagnostic Tool">3acdaefd1be7fc107798a9b7624bcb74</sys_scope>
        <sys_update_name>sys_ui_action_e91b653d4725de506d8ba835126d43b5</sys_update_name>
        <sys_updated_by>Kaloyan.Yanakov@nuvolo.com</sys_updated_by>
        <sys_updated_on>2024-10-30 14:16:16</sys_updated_on>
        <table>x_nuvo_diag_nuvolo_temporary_access</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>e91b653d4725de506d8ba835126d43b5</id>
        <sys_created_by>Kaloyan.Yanakov@nuvolo.com</sys_created_by>
        <sys_created_on>2024-10-30 08:32:09</sys_created_on>
        <sys_id>598b617d47e1de506d8ba835126d4373</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>Kaloyan.Yanakov@nuvolo.com</sys_updated_by>
        <sys_updated_on>2024-10-30 08:32:09</sys_updated_on>
        <table>sys_ui_action</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
