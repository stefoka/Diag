<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_nuvo_diag.HealthCheckProbeUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>All methods for gathering the HealthCheck data</description>
        <mobile_callable>false</mobile_callable>
        <name>HealthCheckProbeUtils</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var HealthCheckProbeUtils = Class.create();
HealthCheckProbeUtils.prototype = {
    initialize: function() {},

     getRecordsCount: function(tableName, encodedQuery) {
        try{
			var clientInstance = gs.getProperty('instance_name')
			
			var url = "https://"+ clientInstance + ".service-now.com/"+tableName+"_list.do?sysparm_query=" + encodedQuery;
			var count = 0;
			
			var gr = new GlideRecord(tableName);
			gr.addEncodedQuery(encodedQuery);
			gr.query();
			count = gr.getRowCount();
			
			var instanceName = gs.getProperty('instance_name');
			return count + '@-@' + url;
        }
        catch(err){
            gs.error('"SI: HealthCheckProbeUtils -> Error when executing Probe Scrip Item with encoded query -  ' + encodedQuery + '. Error is - ' + err)
            return '-1@-@'+url
        }
    },

    getHashedValue: function(key, value) {
        try {
            var name = '';
            var table = '';
            var nuvoloVersion = '';
            var resultObj = {};
            var digest = new GlideDigest();
            var serviceNowVersion = gs.getProperty('glide.buildname') || gs.getProperty('glide.war');

            var grScope = new GlideRecord('sys_scope');
            grScope.addEncodedQuery('scope=x_nuvo_eam');
            grScope.query();
            if (grScope.next()) {
                nuvoloVersion = grScope.version.toString();
            }

            var arr = [];
            var values = value.split(',');
            var gr = new GlideRecord(key);
            gr.addEncodedQuery('sys_scope.scopeSTARTSWITHx_nuvo');
            gr.query();

            while (gr.next()) {
                var fieldValues = '';
                for (var i = 0; i < values.length; i++) {
                    fieldValues += gr[values[i]];

                }

                var dash = digest.getSHA256Hex(fieldValues);
                name = '';
                table = '';
                if (gr.name != undefined && gr.name != null && gr.name != '') {
                    name = gr.name.toString();
                } else if (gr.short_description != undefined && gr.short_description != null && gr.short_description != '') {
                    name = gr.short_description.toString();
                }

                if (gr.collection != undefined && gr.collection != null && gr.collection != '') {
                    table = gr.collection.getDisplayValue().toString();
                } else if (gr.table != undefined && gr.table != null && gr.table != '') {
                    table = gr.table.getDisplayValue().toString();
                }

                var sys_id = gr.sys_id.toString();
                var sys_updated_on = gr.sys_updated_on.getDisplayValue();
                var localHashGr = new GlideRecord('x_nuvo_diag_nuvolo_local_script_hash');
                localHashGr.initialize();
                localHashGr.servicenow_version = serviceNowVersion;
                localHashGr.nuvolo_version = nuvoloVersion;
                localHashGr.script_type = key;
                localHashGr.script_name = name.toString();
                localHashGr.table_name = table;
                localHashGr.hash_value = dash;
                localHashGr.script_id = sys_id,
				localHashGr.last_updated = gr.sys_updated_on;
                localHashGr.insert();

            }
        } catch (err) {
            var localHashGrErr = new GlideRecord('x_nuvo_diag_nuvolo_local_script_hash');
            localHashGrErr.initialize();
            localHashGrErr.servicenow_version = "GENERAL ERROR";
            localHashGrErr.nuvolo_version = "GENERAL ERROR";
            localHashGrErr.script_type = "GENERAL ERROR";
            localHashGrErr.script_name = err.toString();
            localHashGrErr.table_name = "GENERAL ERROR";
            localHashGrErr.hash_value = "GENERAL ERROR";
            localHashGrErr.script_id = "GENERAL ERROR";
            localHashGrErr.insert();
        }

    },
    getUpgradeHistoryData: function(encQuery) {

        try {

            var upgradeHistoryHelper = new global.NuvoHealth_UpgradeHistoryHelper();
			var data = upgradeHistoryHelper.getP1P2Conflicts(encQuery)
            return data;

        } catch (error) {
            gs.error("Error while fetching upgrade conflicts: " + error.message);
        }

    },


	deleteOldProbes: function(type) {
		try 
		{
			//GET ALL CLIENT PROBES FOR THE CURRENT PROBE TYPE
			var clientProbes = [];

			var clientProbesGR = new GlideRecord('x_nuvo_diag_probes');
			clientProbesGR.query();

			//DELETE ALL CLIENT PROBES FOR THE CURRENT PROBE TYPE
			clientProbesGR.deleteMultiple();

        } catch (error) {
            gs.error("Error deleting old Probe records for Healthcheck Type: " + type + ". Error: " + error.message);
        }
	},

	deleteOldProbeItems: function() {
		try 
		{
			//GET ALL CLIENT PROBE SCRIPT ITEMS FOR THE CURRENT PROBE TYPE
			var clientProbeItems = [];

			var clientProbeItemsGR = new GlideRecord('x_nuvo_diag_probe_script_item');
			clientProbeItemsGR.query();

			//DELETE ALL CLIENT PROBE SCRIPT ITEMS FOR THE CUREENT PROBE TYPE
			clientProbeItemsGR.deleteMultiple();

        } catch (error) {
            gs.error("Error deleting old Probe Script Items records for HealthCheck Type: " + type + ". Error: " + error.message);
        }
	},

	pullProbes: function(){
		try{			
			//DELETE OLD PROBE SCRIPT ITEMS
			this.deleteOldProbeItems();
			
			//DELETE OLD PROBES
			this.deleteOldProbes();

			var allProbes = [];
			var probeSysIDs = [];
			var allProbeScriptItems = [];

			// GET Client's version of Connected Workplace
			var cw_version = '';

			var cw_versionGR = new GlideRecord('sys_store_app');
			cw_versionGR.addQuery('scope', 'x_nuvo_eam');

			cw_versionGR.query();

			if(cw_versionGR.next()){
				cw_version = cw_versionGR.version + '';
			}

			var inst = gs.getProperty('x_nuvo_diag.nuvolo_healthcheck_instance_name');
			var currentInstance = gs.getProperty('instance_name');

			if(inst == currentInstance) {
				gs.error("Can't pull probes from the same instance!");
				return;
			}

			var username = gs.getProperty('x_nuvo_diag.integration_user_name');
			var password = gs.getProperty('x_nuvo_diag.integration_user_password');
			var query = encodeURIComponent('active=true^tool=health^product_version=' + cw_version);

			var limit = 10000; // Number of records to fetch in each call
			var offset = 0;    // Start offset for the query
			var hasMoreRecords = true; // Flag to track whether more records exist
			
			while (hasMoreRecords) {
			
				var apiEndpoint = 'https://' + inst + '.service-now.com/api/now/table/x_nuvo_diag_probes?sysparm_query=' + query + '^&sysparm_limit=' + limit + '&sysparm_offset=' + offset;

				var r = new sn_ws.RESTMessageV2();
				r.setEndpoint(apiEndpoint);
				r.setHttpMethod('GET');
				r.setRequestHeader('Content-Type', 'application/json');
				r.setBasicAuth(username, password);

				try{
					var response = r.execute();
					var responseBody = response.getBody();
					var httpStatus = response.getStatusCode();

					if (httpStatus == 200) {
						var result = JSON.parse(responseBody).result;

						for (var j = 0; j < result.length; j++) {
							
							var record = result[j];
							probeSysIDs.push(record.sys_id);

							var probeObj = {
								sys_id: record.sys_id,
								record: record
							};
							
							allProbes.push(probeObj);
						}

						//GET ALL RELATED PROBE SCRIPT ITEMS
						allProbeScriptItems = this.pullProbeScriptItems(inst, probeSysIDs);

						//CREATE ALL NEW PROBES IN THE CLIENT FOR THE CURRENT PROBE TYPE
						for(var k = 0; k < allProbes.length; k++){
							var probe = allProbes[k];

							var newProbeGr = new GlideRecord('x_nuvo_diag_probes');
							newProbeGr.initialize();

							newProbeGr.active = probe.record.active;
							newProbeGr.probe_type = probe.record.probe_type.value;
							newProbeGr.healthcheck_type = probe.record.healthcheck_type;
							newProbeGr.description = probe.record.description;
							newProbeGr.name = probe.record.name;
							newProbeGr.order = probe.record.order;
							newProbeGr.tool = probe.record.tool;
							newProbeGr.product_version = probe.record.product_version;
							newProbeGr.sys_scope = "3acdaefd1be7fc107798a9b7624bcb74"; //Diagnostic tool

							var probeID = newProbeGr.insert();

							//GET THE PROBE'S SCRIPT ITEMS
							var probeItems = allProbeScriptItems.filter(function(item) {
								return item.probe.value == probe.sys_id;
							});

							//CREATE ALL NEW PROBE SCRIPT ITEMS IN THE CLIENT FOR THE CURRENT PROBE TYPE
							for (var m = 0; m < probeItems.length; m++) {
								
								var newProbeItemsGr = new GlideRecord('x_nuvo_diag_probe_script_item');
								newProbeItemsGr.initialize();

								//Realte the Script Item to the probe
								newProbeItemsGr.probe = probeID;

								newProbeItemsGr.script = probeItems[i].script;
								newProbeItemsGr.sys_package = probeItems[i].sys_package.value;
								newProbeItemsGr.threshold = probeItems[i].threshold;
								newProbeItemsGr.name = probeItems[i].name;
								newProbeItemsGr.order = probeItems[i].order;
								newProbeItemsGr.sys_created_by = probeItems[i].sys_created_by;
								newProbeItemsGr.sys_scope = "3acdaefd1be7fc107798a9b7624bcb74"; //Diagnostic tool

								newProbeItemsGr.insert();
							}
						}

						// Increase offset for the next batch
            			offset += limit;
					}
					else {
						gs.error('Failed to retrieve data. HTTP Status: ' + httpStatus);
            			gs.error('Response Body: ' + responseBody);
            			hasMoreRecords = false; // Stop the loop on error
					}
				} catch(ex){
					gs.error('An error occurred: ' + ex.message);
        			hasMoreRecords = false; // Stop the loop on exception
				}
	
			}
			//GET THE CLIENT HEALTHCHECK CONFIGURATION RECORD IN NUVOLO
			var client_config = this.getClientConfig(inst);

			//UPDATE THE CLIENT HEALTHCHECK CONFIG RECORD IN NUVOLO
			if(client_config) {
				this.updateClientConfig(inst, client_config);
			}
		}catch (ex) {
            gs.error("pullProbes Error: " + ex.message);
        }	
	},

	pullProbeScriptItems: function(inst, probes) {
		
		try{
			var probeScriptItems = [];

			var username = gs.getProperty('x_nuvo_diag.integration_user_name');
			var password = gs.getProperty('x_nuvo_diag.integration_user_password');

			var limit = 10000; // Number of records to fetch in each call
			var offset = 0;    // Start offset for the query
			var hasMoreRecords = true; // Flag to track whether more records exist

			var query = encodeURIComponent('probe.sys_idIN' + probes);
			var apiEndpoint = 'https://' + inst + '.service-now.com/api/now/table/x_nuvo_diag_probe_script_item?sysparm_query=' + query + '&sysparm_limit=' + limit + '&sysparm_offset=' + offset;

			while (hasMoreRecords) {

				var r = new sn_ws.RESTMessageV2();
				r.setEndpoint(apiEndpoint);
				r.setHttpMethod('GET');
				r.setRequestHeader('Content-Type', 'application/json');
				r.setBasicAuth(username, password);

				try{
					var response = r.execute();
					var responseBody = response.getBody();
					var httpStatus = response.getStatusCode();

					if (httpStatus == 200) {
						var result = JSON.parse(responseBody).result;
						
						for (var i = 0; i < result.length; i++) {
							var record = result[i];
							probeScriptItems.push(record);
						}

						// Increase offset for the next batch
						offset += limit;
						
					}else {
						gs.error('Failed to retrieve data. HTTP Status: ' + httpStatus);
						gs.error('Response Body: ' + responseBody);
						hasMoreRecords = false; // Stop the loop on error
					}
					return probeScriptItems;
				}catch(ex){
					gs.error('An error occurred: ' + ex.message);
					hasMoreRecords = false; // Stop the loop on exception
				}
			}
		}catch (ex) {
            gs.error("pullProbeScriptItems Error: " + ex.message);
        }
		
	},

	getClientConfig: function(inst) {
		
		try{
			var clientInstance = gs.getProperty('instance_name') + "";
			
			var query = encodeURIComponent('active=true^client_instance=' + clientInstance);
			var apiEndpoint = 'https://' + inst + '.service-now.com/api/now/table/x_nuvo_health_scan_client_healthcheck_config?sysparm_query=' + query;

			var username = gs.getProperty('x_nuvo_diag.integration_user_name');
			var password = gs.getProperty('x_nuvo_diag.integration_user_password');
			
			var r = new sn_ws.RESTMessageV2();
			r.setEndpoint(apiEndpoint);
			r.setHttpMethod('GET');
			r.setRequestHeader('Content-Type', 'application/json');
			r.setBasicAuth(username, password);

			var response = r.execute();
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();

			if (httpStatus == 200) {
				gs.info("IN300 getClientConfig API SUCCESS!");
				var result = JSON.parse(responseBody).result;
				var record = result[0];

				return record.sys_id + '';
			}else {
				gs.info("IN000 getClientConfig API FAIL!");
			}
		}catch (ex) {
            gs.error("IN000 getClientConfig Error: " + ex.message);
        }
		
	},

	updateClientConfig: function(inst, sys_id) {
		
		try{
			var updateData = {
				last_probes_pull: new GlideDateTime().getDisplayValue() + "",
			};

			var clientInstance = gs.getProperty('instance_name');

			var apiEndpoint = 'https://' + inst + '.service-now.com/api/now/table/x_nuvo_health_scan_client_healthcheck_config/' + sys_id;

			var username = gs.getProperty('x_nuvo_diag.integration_user_name');
			var password = gs.getProperty('x_nuvo_diag.integration_user_password');
			
			var r = new sn_ws.RESTMessageV2();
			r.setEndpoint(apiEndpoint);
			r.setHttpMethod('PATCH');
			r.setRequestHeader('Content-Type', 'application/json');
			r.setBasicAuth(username, password);

			var requestBody = JSON.stringify(updateData);
            r.setRequestBody(requestBody);

			var response = r.execute();
			var httpStatus = response.getStatusCode();

			if (httpStatus != 200 && httpStatus != 204) {
                gs.error('updateClientConfig Error updating record sys_id: ' + sys_id + ', HTTP Status: ' + httpStatus);
            }
		}catch (ex) {
            gs.error("updateClientConfig Error: " + ex.message);
        }
		
	},

    type: 'HealthCheckProbeUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>iliyan.nedelchev@nuvolo.com</sys_created_by>
        <sys_created_on>2024-09-13 08:30:53</sys_created_on>
        <sys_id>c218e32e47e4da109d9f9915126d43a2</sys_id>
        <sys_mod_count>113</sys_mod_count>
        <sys_name>HealthCheckProbeUtils</sys_name>
        <sys_package display_value="Diagnostic Tool" source="x_nuvo_diag">3acdaefd1be7fc107798a9b7624bcb74</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Diagnostic Tool">3acdaefd1be7fc107798a9b7624bcb74</sys_scope>
        <sys_update_name>sys_script_include_c218e32e47e4da109d9f9915126d43a2</sys_update_name>
        <sys_updated_by>iliyan.nedelchev@nuvolo.com</sys_updated_by>
        <sys_updated_on>2024-12-10 13:46:16</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>c218e32e47e4da109d9f9915126d43a2</id>
        <sys_created_by>Stefan.Popov@nuvolo.com</sys_created_by>
        <sys_created_on>2024-10-09 07:22:56</sys_created_on>
        <sys_id>2e4299cb93cd5210052ef5cd0bba108d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>Stefan.Popov@nuvolo.com</sys_updated_by>
        <sys_updated_on>2024-10-09 07:22:56</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
